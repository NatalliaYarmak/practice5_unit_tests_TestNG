package n.yarmak.practice5_unit_tests;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;

import org.testng.Assert;
import org.testng.annotations.Test;

public class PenTest {
	public static final String NOT_BLUE_COLOR = "RED";
	public static final String BLUE_COLOR = "BLUE";
	public static final String HELLO = "Hello";
	
	@Test
	public void testxPenWorksWithInk(){
		Pen pen = new Pen(1);
		
		Assert.assertTrue(pen.isWork());
	} 
	
	@Test
	public void testPenDoesNotWorkWithoutInk(){
		Pen pen = new Pen(0);
		
		Assert.assertFalse(pen.isWork());
	}
	
	@Test
	public void testGetDefaultColor(){
		Pen pen = new Pen(22);
		
		Assert.assertEquals(pen.getColor(), BLUE_COLOR);
	}
	
	//test is failed coz there's bug in code 
	@Test
	public void testGetNotBlueColor(){
		Pen pen = new Pen(1000, 0.1, NOT_BLUE_COLOR);
		
		Assert.assertEquals(pen.getColor(), NOT_BLUE_COLOR);
	}
	
	@Test
	public void testWriteNothingWithoutInk(){
		Pen pen = new Pen(0, 1.0);
		
		Assert.assertEquals(pen.write(HELLO), "");
	}
	
	@Test
	public void testWriteHello(){
		Pen pen = new Pen(5, 1.0);
		
		Assert.assertEquals(pen.write(HELLO), HELLO);
	}
	
	@Test
	public void testAfterWritingInkIsOut(){
		Pen pen = new Pen(5, 1.0);
		pen.write(HELLO);
		
		Assert.assertFalse(pen.isWork());
	}	
	
	//test is failed coz there's bug in code
	@Test
	public void testNotEnoughInkToWriteFullWord(){
		Pen pen = new Pen(5, 2.0);
		
		Assert.assertEquals(pen.write(HELLO), "He");
	}
	
	@Test
	public void testAfterPartialWritingInkIsOut(){
		Pen pen = new Pen(5, 2.0);
		pen.write(HELLO);
		
		Assert.assertFalse(pen.isWork());
	}
	
	@Test
	public void testDoSomethingElse(){
		ByteArrayOutputStream pipeOut = new ByteArrayOutputStream();
		// Store the current System.out;
		PrintStream oldOut = System.out;
		//Redirect output to pipeOut
		System.setOut(new PrintStream(pipeOut));
		Pen pen = new Pen(1000,1.0, BLUE_COLOR);
		
		pen.doSomethingElse();
		Assert.assertEquals(pipeOut.toString(), String.format(BLUE_COLOR+"%n"));
		
		//Revert back to the old System.out
		System.setOut(oldOut);
	}
}
