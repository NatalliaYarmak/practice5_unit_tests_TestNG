package n.yarmak.practice5_unit_tests;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class PenTest extends Assert {

	@DataProvider
	public Object[][] isWorkData() {
		return new Object[][] { 
			{ new Pen(1000), true }, 
			{ new Pen(0), false }
		};
	}

	@Test(dataProvider = "isWorkData")
	public void testIsWork(Pen pen, boolean expected) {
		final boolean actual = pen.isWork();
		assertEquals(actual, expected);
	}

	@DataProvider
	public Object[][] getColorData() {
		return new Object[][] { 
			{ new Pen(1000), "BLUE" }, // test default value
			{ new Pen(1000, 1.0, "RED"), "RED" }
		};
	}

	@Test(dataProvider = "getColorData")
	public void testGetColor(Pen pen, String expected) {
		final String actual = pen.getColor();
		assertEquals(actual, expected);
	}

	@DataProvider
	public Object[][] writeData() {
		return new Object[][] { 
			{ new Pen(1000, 1.0), "Hello", "Hello" }, 
			{ new Pen(0, 1.0), "Hello", "" },
			{ new Pen(5, 2.0), "Hello", "He" }
		};
	}

	@Test(dataProvider = "writeData")
	public void testGetColor(Pen pen, String word, String expected) {
		final String actual = pen.write(word);
		assertEquals(actual, expected);
	}

	@DataProvider
	public Object[][] inkIsLowAfterWritingData() {
		return new Object[][] { 
			{ new Pen(6, 1.0), "Hello", true }, 
			{ new Pen(5, 1.0), "Hello", false },
			{ new Pen(5, 2.0), "Hello", false }
		};
	}

	@Test(dataProvider = "inkIsLowAfterWritingData")
	public void testInkIsLowAfterWriting(Pen pen, String word, boolean expected) {
		pen.write(word);
		final boolean actual = pen.isWork();
		assertEquals(actual, expected);
	}

	@DataProvider
	public Object[][] doSomethingElseData() {
		return new Object[][] { 
			{ new Pen(1000), String.format("BLUE%n") }, // test default value
			{ new Pen(1000, 1.0, "RED"), String.format("RED%n") }
		};
	}

	@Test(dataProvider = "doSomethingElseData")
	public void testDoSomethingElse(Pen pen, String expected) {
		ByteArrayOutputStream pipeOut = new ByteArrayOutputStream();
		// Store the current System.out;
		PrintStream oldOut = System.out;
		// Redirect output to pipeOut
		System.setOut(new PrintStream(pipeOut));

		pen.doSomethingElse();
		final String actual = pipeOut.toString();

		assertEquals(actual, expected);

		// Revert back to the old System.out
		System.setOut(oldOut);
	}
}
